name: Downloader

on:
  workflow_dispatch:
    inputs:
      urls:
        description: "URLs (uma por linha)"
        required: true
        type: string
      audio_format:
        description: "Formato de áudio (ex: mp3, m4a, opus)"
        required: false
        default: "mp3"
        type: string
      download_dir:
        description: "Pasta de saída"
        required: false
        default: "downloads"
        type: string

jobs:
  run:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # Gera config.json a partir dos inputs
      - name: Create config.json
        env:
          URLS: ${{ inputs.urls }}
          AUDIO_FORMAT: ${{ inputs.audio_format }}
          DOWNLOAD_DIR: ${{ inputs.download_dir }}
        run: |
          node - <<'NODE'
          const fs = require('fs');
          const urls = (process.env.URLS || '')
            .split(/\r?\n/)
            .map(s => s.trim())
            .filter(Boolean);

          const dir = process.env.DOWNLOAD_DIR || 'downloads';
          const fmt = process.env.AUDIO_FORMAT || 'mp3';

          // Força saída dentro do volume /downloads do container
          const cfg = {
            download_directory: dir,
            audio_format: fmt,
            binary_args: `--audio-quality 0 --extract-audio --audio-format "${fmt}" -f "bestaudio" -P /downloads -o "%(title)s.%(ext)s"`,
            urls
          };

          fs.writeFileSync('config.json', JSON.stringify(cfg, null, 2));
          console.log('config.json:\n', JSON.stringify(cfg, null, 2));
          NODE

      - name: Install deps (se preciso)
        run: npm ci || true

      - name: Run downloader (node index.js)
        run: node index.js

      # Cria ZIP explícito (o upload-artifact já comprime, mas aqui você controla o nome)
      - name: Zip output
        run: |
          set -e
          OUT="${{ inputs.download_dir }}"
          test -d "$OUT" || (echo "Nada para zipar, pasta não existe"; exit 1)
          zip -r "${OUT}.zip" "$OUT"

      - name: Upload artifact (zip)
        uses: actions/upload-artifact@v4
        with:
          name: downloads-${{ github.run_id }}
          path: ${{ inputs.download_dir }}.zip
          if-no-files-found: error

